<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of Util
 *
 * @author hendra
 */
class WarungUtils {

    /**
     * Parse multiline json string into json object array
     * @param String $s_content json string
     * @param Boolean $b_generate_id if set to true 'id' properties will be added with autogenerated values for each json object
     * @return Array of json object
     */
    public static function parseJsonMultiline($s_content, $b_generate_id = true) {
        $s_content = str_replace('\\"', '"', $s_content);

        $a_ret = explode("\n", $s_content);
        $i = 0;
        foreach ($a_ret as &$r) {
            if ($b_generate_id) {
                $r = '{"id":' . $i++ . ',' . $r . '}';
            } else {
                $r = '{' . $r . '}';
            }
            $r = json_decode($r);
        }
        return $a_ret;
    }

    /**
     * Append url with get parameters in $param
     * @param String $url
     * @param Associative Arrays $param
     * @return String $url with appended parameter
     */
    public static function addParameter($url, $param) {
        $ret = $url;
        $qstr = '';
        $i = 0;
        foreach ($param as $key => $value) {
            if ($i++ == 0) {
                $qstr .= $key . '=' . $value;
            } else {
                $qstr .= '&' . $key . '=' . $value;
            }
        }
        if (strpos($url, '?')) {
            $ret = $url . '&' . $qstr;
        } else {
            $ret = $url . '?' . $qstr;
        }

        return $ret;
    }

    /**
     * Parse all input element with name $name_form_name and value $value_form_name into assoc array
     * example product_options_name-1="sprei" product_option_value-1="123"
     * will be parsed into array ( sprei => 123 )
     *
     * @param <type> $posts
     * @param <type> $name_form_name
     * @param <type> $value_form_name
     * @return Assoc Array
     */
    public static function parseNamevalParameters($posts, $name_form_name, $value_form_name) {
        $ret = array();

        $prev_idx = 0;
        $prev_name = '';
        foreach ($posts as $key => $val) {

            if (!empty($val)) {
                if (strpos($key, $name_form_name) !== false) {
                    $tok = explode('-', $key);
                    $prev_idx = $tok[1];
                    $prev_name = $val;
                } else if (strpos($key, $value_form_name) !== false) {
                    if (strlen(trim($prev_name)) > 0) {
                        $ret[$prev_name] = $val;
                    }
                }
            }
        }

        return $ret;
    }

    /**
     * Return object from post request with this format
     * prefix-name-1=val1
     * prefix-text-1=val2
     * prefix-text-2=val3
     * prefix_name-2=val4
     *
     * will return:
     *     array (
     *         obj {name:val1;text=val2},
     *         obj {name:val4;text=val2}
     *     );
     *
     * @param <type> $posts
     * @param <type> $name_prefix
     * @param <type> $value_form_name
     * @return <type>
     */
    public static function parseParametersToObject($posts, $name_prefix) {
        $ret = array();

        foreach ($posts as $key => $val) {
            if (!empty($val)) {
                // starts with prefix
                $pat = '/' . $name_prefix . '[-_]*(\w+)([-_]*(\d+))*/i';
                if (preg_match($pat, $key, $matches)) {
                    if (isset($matches[1]) && isset($matches[3])) {
                        if (empty($ret[intval($matches[3])])) {
                            $newObj = null;
                            $newObj->$matches[1] = $val;
                            $ret[intval($matches[3])] = $newObj;
                        } else {
                            $obj = $ret[intval($matches[3])];
                            $obj->$matches[1] = $val;
                        }
                    }
                }
            }
        }

        return $ret;
    }

    public static function ceilToThousand($n) {
        return WarungUtils::ceilTo($n, 1000);
    }

    public static function ceilToHundred($n) {
        return WarungUtils::ceilTo($n, 100);
    }

    public static function ceilTo($n, $rf) {

        if ($n / $rf > 1) {
            return ceil($n / $rf) * $rf;
        }
        return $n;
    }

    /**
     * Add currency sign and add period every thousand
     * @param number $price
     * @return string
     */
    public static function formatCurrency($price) {
        $wo = new WarungOptions();
        $currency = $wo->getCurrency();

        return trim($currency) . number_format($price, 0, ',', '.');
    }

    /**
     * Add weight sign and add period on thousand
     * @param number $weight
     * @return string
     */
    public static function formatWeight($weight) {
        $wo = new WarungOptions();
        $weight_sign = $wo->getWeightSign();
        return number_format($weight, 1, ',', '.') . ' ' . trim($weight_sign);
    }

    /**
     * Format parameter to KeranjangItem instance
     * @param Array $product
     * @param int $optId
     * @return KeranjangItem
     */
    public static function formatToKeranjangItem($product, $optId = -1) {
        $ret = (object)array();
        if (!empty($product)) {
            
            if (isset($optId) && $optId != -1) {
                $opt = self::getSelectedOption($product, $optId);
                if (!empty($opt)) {

                    
                    
                    $iCartId = $product["id"] . '-' . $opt->id;
                    $iProductId = $product["id"];
                    $iName = $product["name"] . ' - ' . $opt->name;
                    $iPrice = $opt->price;
                    $iWeight = $opt->weight;
                    $iQuantity = 1;
                    $iWeightDiscount = 0;
                    if (isset($opt->weight_discount)) {
                        $iWeightDiscount = $opt->weight_discount;
                    }

                    $iAttachment = array("product" => $product, "opt_name" => $opt->name, "opt_id" => $opt->id);

                    
                    $ret->cartId = $iCartId;
                    $ret->productId = $iProductId;
                    $ret->name = $iName;
                    $ret->price = $iPrice;
                    $ret->weight = $iWeight;
                    $ret->attachment = $iAttachment;
                    $ret->quantity = $iQuantity;
                    $ret->weightDiscount = $iWeightDiscount;
                    $ret->shipping = $product["shipping"];
                    
                }
            } else {


                $iCartId = $product["id"];
                $iProductId = $product["id"];
                $iName = $product["name"];
                $iPrice = $product["price"];
                $iWeight = $product["weight"];
                $iQuantity = 1;
                $iWeightDiscount = 0;
                if (isset($opt->weight_discount)) {
                    $iWeightDiscount = $opt->weight_discount;
                }

                $iAttachment = array("product" => $product);
                if (isset($product["price_discount"])) {
                    $iAttachment["price_discount"] = $product["price_discount"];
                }

                $ret->cartId = $iCartId;
                $ret->productId = $iProductId;
                $ret->name = $iName;
                $ret->price = $iPrice;
                $ret->weight = $iWeight;
                $ret->attachment = $iAttachment;
                $ret->quantity = $iQuantity;
                $ret->weightDiscount = $iWeightDiscount;
                $ret->shipping = $product["shipping"];
            }
        }
        return $ret;
    }

    protected static function getSelectedOption($product, $id) {
        $ret;

        if (!empty($product["option_value"])) {
            foreach ($product["option_value"] as $po) {
                if ($id == $po->id) {
                    $ret = $po;
                    break;
                }
            }
        }

        return $ret;
    }

    private static function isAssoc($arr) {
        return array_keys($arr) !== range(0, count($arr) - 1);
    }
    
    public static function htmlSelect($id, $name, $data, $selectedVal = null, $class = null, $noSelectionText=null) {
        $ret = '<select id="' . $id . '" name="' . $name . '"';
        if ($class) {
            $ret .= ' class="' . $class . '"';
        }
        $ret .= ">";
        if (self::isAssoc($data)) {
            $i = 0;
            foreach ($data as $key => $val) {
                if ($i == 0 && $noSelectionText) {
                    $ret .= '<option value="">'.$noSelectionText.'</option>';
                }
                
                if ($selectedVal != null && $key == $selectedVal) {
                    $ret .= '<option value="' . $key . '" selected="selected">' . $val . '</option>';
                } else {
                    $ret .= '<option value="' . $key . '">' . $val . '</option>';
                }
                $i++;
            }
        } else {
            $i=0;
            foreach ($data as $val) {
                if ($i == 0 && $noSelectionText) {
                    $ret .= '<option value="">'.$noSelectionText.'</option>';
                }
                
                if ($selectedVal != null && $val == $selectedVal) {
                    $ret .= '<option value="' . $val . '" selected="selected">' . $val . '</option>';
                } else {
                    $ret .= '<option value="' . $val . '">' . $val . '</option>';
                }
                $i++;
            }
        }
        $ret .= "</select>";

        return $ret;
    }
    
    public static function prettyDate($date) {
        $now = time();
        $otherDate = strtotime($date);
        
        $diffHour = floor(($now-$otherDate)/3600);

        if($diffHour < 24) {
            return "Today";
        } else if ($diffHour < 48) {
            return "Yesterday";
        } else if ($diffHour < 5 * 24 /*5 days*/) {
            return floor($diffHour/24) . " days ago";
        } else {
            return $date;
        }
    }
    
    public static function formatItems($array, $class="", $itemSeparator="") {
        $ret ="";
        
        if (empty($itemSeparator)) {
            $ret = '<ul class="'.$class.'">';
        }
        
        // validation
        if (empty($array) && !is_array($array)) return $ret;
        
        foreach($array as $el) {
            if (empty($itemSeparator)) {
                $ret .= "<li>".$el->name." [x".$el->quantity."]</li>";
            } else {
                $ret .= $el->name." [x".$el->quantity."]".$itemSeparator;
            }
        }
        
        if (empty($itemSeparator)) {
            $ret .= "</ul>";
        }
        
        return $ret;
    }
    
//    public static function relativeTime($timestamp) {
//        $theDate = DateTime::createFromFormat('Y-m-d H:i:s',$timestamp);
//        $now = new DateTime();
//        
//        $difference = $theDate->diff($now);
//        
//        if ($difference->days <= 0) {
//            // today
//            
//            if ($difference->h != 0) {
//                
//                // check hours
//                if ($difference->h > 0) {
//                    return $difference->h." hours ago";
//                } else {
//                    return $difference->h." hours to go";
//                }
//            } else if ($difference->i != 0) {
//                
//                // check minutes
//                if ($difference->i > 0) {
//                    return $difference->i." minutes ago";
//                } else {
//                    return $difference->i." minutes to go";
//                }
//                
//            } else if ($difference->s != 0) {
//                
//                // check seconds
//                if ($difference->s > 0) {
//                    return $difference->s." seconds ago";
//                } else {
//                    return $difference->s." seconds to go";
//                }
//                
//            } else {
//                // what?
////                error_log("unknown relative time: ".$timestamp);
//            }
//            
//        } else {
//            // yesterday
//            if ($difference->days > 0) {
//                return $difference->days." days ago";
//            } else {
//                return $difference->days." to go";
//            }
//        }
//        
//    }
    
    public static function relativeTime($timestamp) {
        $theDate = DateTime::createFromFormat('Y-m-d H:i:s',$timestamp);
        $now = new DateTime();
        
        if ($now->format("Y") > $theDate->format("Y")) {
            return $theDate->format('d M Y');
        } else {
            return $theDate->format('d M');
        }
    }
    
    public static function generateTemplate($templateStr, $params) {
        foreach ($params as $key => $value) {
            $templateStr = str_replace('%'.$key.'%', $value, $templateStr);
        }

        return $templateStr;
    }

}

?>
